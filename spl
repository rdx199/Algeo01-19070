package com.belajar;


import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        int jumlahSPL = insertJumlahSPL();
        int jumlahVar = insertJumlahVar();

        double[][] matriks = new double[jumlahSPL][jumlahVar + 1];

        bacaValue(matriks, jumlahSPL, jumlahVar);
        printMatriks(matriks, jumlahSPL, jumlahVar);
//        eselonmatriks(matriks, jumlahSPL, jumlahVar);
//        System.out.println("");
//        printMatriks(matriks, jumlahSPL, jumlahVar);
        crammer(matriks,jumlahSPL,jumlahVar);

    }

    public static int insertJumlahSPL() {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Masukkan jumlah baris (m): ");
        return scanner.nextInt();
    }

    public static int insertJumlahVar() {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Masukkan jumlah kolom (n): ");
        return scanner.nextInt();
    }

    public static void bacaValue(double[][] matriks, int jumlahSPL, int jumlahVar) {
        Scanner scanner = new Scanner(System.in);

        for (int i = 0; i < jumlahSPL; i++) {
            for (int j = 0; j < jumlahVar; j++) {
                System.out.print("Masukkan matriks" + "[" + (i + 1) + "]" + "[" + (j + 1) + "] : ");
                matriks[i][j] = scanner.nextDouble();
            }

            System.out.print("Masukkan solusi SPL-" + (i + 1) + " : ");
            matriks[i][jumlahVar] = scanner.nextDouble();
        }
    }

    public static void printMatriks(double[][] matriks, int jumlahSPL, int jumlahVar) {
        for (int i = 0; i < jumlahSPL; i++) {
            for (int j = 0; j < jumlahVar; j++) {
                System.out.print(matriks[i][j] + " ");
            }

            System.out.print(matriks[i][jumlahVar]);
            System.out.println("");
        }
    }

     public static void gabungmatriks(double[][] induk, double[][] anak,int newSPL, int newVar) {
        for (int i=0; i<newSPL;i++) {
            for (int j=0;j<newVar+1;j++) {
                induk[(induk.length-newSPL)+i][(induk[0].length-(newVar+1))+j]=anak[i][j];
            }
        }
    }
    public static void eselonmatriks(double[][] matriks, int jumlahSPL, int jumlahVar) {
        int newSPL = jumlahSPL;
        int newVar = jumlahVar;
        eselon(matriks, newSPL, newVar);
    }

    public static void eselon(double[][] matriks, int newSPL, int newVar) {
        if (newSPL == 1) { // basis
            double rasio = (1 / matriks[0][0]);
            for (int j = 0; j < newVar + 1; j++) {
                matriks[0][j] = matriks[0][j] * rasio;
            }
        } else {
            for (int i = 0; i < newSPL; i++) { //bagi rasio
                double rasio = (1 / matriks[i][0]);
                for (int j = 0; j < newVar + 1; j++) {
                    matriks[i][j] = matriks[i][j] * rasio;
                }
            }
            for (int i = 1; i < newSPL; i++) {
                for (int j = 0; j < newVar + 1; j++) { // reduksi
                    matriks[i][j] = matriks[i][j] - matriks[0][j];

                }
            }
            double[][] indikator = new double[newSPL - 1][newVar];
            for (int i = 1; i < newSPL; i++) { //matriks anak
                for (int j = 1; j < newVar + 1; j++) {
                    indikator[i - 1][j - 1] = matriks[i][j];
                }
            }
            eselon(indikator, newSPL - 1, newVar - 1); // rekursif
            gabungmatriks(matriks,indikator, newSPL, newVar);
        }
    }

    public static void cramer (double[][] M) {
        double[][] m2 = new double[M.length][M[0].length];
        copy(m2,M);
        double[][] m3 = new double[M.length][M[0].length - 1];

        // copy m2 ke m3, tapi tidak termasuk hasil spl
        for (int i = 0; i < m3.length; i++) {
            for (int j = 0; j < m3[0].length; j++) {
                m3[i][j] = m2[i][j];
            }
        }
        if (M.length != M[0].length - 1) {
            System.out.println("tidak ada determinan dikarenakan matriks bukan persegi");
        } else {
            double det = Determinan.ekspansiKofaktor(m3);

            for (int j = 0; j < M[0].length - 1; j++) {
                gantikolom(m2,j);
                // copy m2 ke m3, tapi tidak termasuk hasil spl
                for (int k = 0; k < m3.length; k++) {
                    for (int l = 0; l < m3[0].length; l++) {
                        m3[k][l] = m2[k][l];
                    }
                }
                double detx = Determinan.ekspansiKofaktor(m3);
                System.out.println("x" + (j + 1) + " = " + (detx / det));
                copy(m2,M);

            }
        }
    }
}
